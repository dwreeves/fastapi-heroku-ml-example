#!/usr/bin/env bash

DC="${DC:-exec}"

set -eo pipefail

# Force disable TTY allocation in CI.
if [[ ! -t 1 ]]
then TTY="-T"
else TTY=""
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker compose "${DC}" "${TTY}" "${@}"
}

function _build_run_down {
  docker compose build
  docker compose run "${TTY}" "${@}"
  docker compose down
}

# -----------------------------------------------------------------------------

function setup {
  # first time (local) setup of the repo.
  python3.10 -m venv venv
  # shellcheck source=/dev/null
  source venv/bin/activate
  python -m pip install -r requirements.txt
  python venv/bin/pre-commit install
}

# -----------------------------------------------------------------------------

function cmd {
  # Run any command you want in the web container
  _dc web "${@}"
}

function setup:osx {
  # Download devops dependencies (notwithstanding Docker + Python)
  brew update
  brew tap heroku/brew && brew install heroku
  brew install shellcheck
  brew install hadolint
}

function lint:dockerfile {
  # Lint Dockerfile
  docker container run --rm -i \
    hadolint/hadolint hadolint --ignore DL3008 "${@}" - < Dockerfile
}

function lint {
  # Lint Python code
  cmd flake8 "${@}"
}

function test {
  # Run test suite
  cmd python -m pytest "${@}"
}

function test:coverage {
  # Get test coverage
  cmd pytest --cov test/ --cov-report term-missing "${@}"
}

function shell {
  # Start a shell session in the web container
  cmd bash "${@}"
}

function psql {
  # Connect to PostgreSQL
  _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

function redis-cli {
  # Connect to Redis
  _dc redis redis-cli "${@}"
}

function heroku:create {
  heroku apps:create -a "${1}-development"
  heroku apps:create -a "${1}-staging"
  heroku apps:create -a "${1}-production"
  heroku git:remote -a "${1}-development"
  heroku pipelines:create "${1}" -a "${1}-development" --stage development
  heroku pipelines:add "${1}" -a "${1}-staging" --stage staging
  heroku pipelines:add "${1}" -a "${1}-production" --stage production
  heroku pipelines:info "${1}"
  echo
  echo "You are being sent to the Heroku CI dashboard."
  echo "Hook up a Github repo to the pipeline!"
  echo
  sleep 2
  heroku ci:open
}

function heroku:destroy {
  heroku pipelines:destroy "${1}" --confirm "${1}"
  heroku apps:destroy "${1}-development" --confirm "${1}-development"
  heroku apps:destroy "${1}-staging" --confirm "${1}-staging"
  heroku apps:destroy -a "${1}-production" --confirm "${1}-production"
  heroku git:remote -a "${1}-development"
  git remote remove heroku
}

function clean {
  # Remove cache and other machine generates files
  rm -rf public/*.* public/js public/css public/images public/fonts \
    .pytest_cache/ .coverage celerybeat-schedule

  touch public/.keep
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
